#+SETUPFILE: theme-readtheorg.setup

* To-do
*** TODO tabular-like alignment
*** DONE vim-like buffer while scrolling
*** TODO completion
*** TODO IOSEVKA font?
*** TODO magit.sh like functionality

* Emacs Configuration
** Centaur Tabs
 #+BEGIN_SRC emacs-lisp

(after! highlight-indent-guides
  (setq highlight-indent-guides-auto-enabled nil)
  )
;; (use-package! centaur-tabs
;;   :config
;;   (centaur-tabs-mode t)
;;   ;("C-S-tab" . centaur-tabs-backward)
;;   ;("C-tab" . centaur-tabs-forward)
;;  )
 #+END_SRC
** mu4e
#+BEGIN_SRC emacs-lisp
(after! mu4e
  (setq mail-user-agent 'mu4e-user-agent)
  (setq mu4e-drafts-folder "/[Gmail].Drafts")
  (setq mu4e-sent-folder   "/[Gmail].Sent Mail")
  (setq mu4e-trash-folder  "/[Gmail].Trash")
  (setq mu4e-sent-messages-behavior 'delete)
  (setq mu4e-maildir-shortcuts
        '( ("/INBOX"               . ?i)
           ("/[Gmail].Sent Mail"   . ?s)
           ("/[Gmail].Trash"       . ?t)
           ("/[Gmail].All Mail"    . ?a)))
  (setq mu4e-get-mail-command "offlineimap")
  (setq mu4e-use-fancy-chars t)
  (setq mu4e-view-show-addresses t)
  (setq mu4e-view-show-images t)
  (add-hook 'mu4e-view-mode-hook #'visual-line-mode)
  (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
)
#+END_SRC
** Appearance
#+BEGIN_SRC emacs-lisp
;;; Scrolling.
;; Good speed and allow scrolling through large images (pixel-scroll).
;; Note: Scroll lags when point must be moved but increasing the number
;;       of lines that point moves in pixel-scroll.el ruins large image
;;       scrolling. So unfortunately I think we'll just have to live with
;;       this.
;; (pixel-scroll-mode)
;; (setq pixel-dead-time 0) ; Never go back to the old scrolling behaviour.
;; (setq pixel-resolution-fine-flag t) ; Scroll by number of pixels instead of lines (t = frame-char-height pixels).
;; (setq mouse-wheel-scroll-amount '(2)) ; Distance in pixel-resolution to scroll each mouse wheel event.
;; (setq mouse-wheel-progressive-speed nil) ; Progressive speed is too fast for me.

(after! dired
  (setq dired-listing-switches "-a1vBhl  --group-directories-first")
)


(after! git-gutter-fringe
  (fringe-mode 6)
  (fringe-helper-define 'git-gutter-fr:added nil
    "...X...."
    "...X...."
    "...X...."
    "...X...."
    "XXXXXXXX"
    "...X...."
    "...X...."
    "...X....")

  (fringe-helper-define 'git-gutter-fr:deleted nil
    "........"
    "........"
    "........"
    "XXXXXXXX"
    "........"
    "........"
    "........"
    "........")

  (fringe-helper-define 'git-gutter-fr:modified nil
    "X......."
    "XXX....."
    "XXXXX..."
    "XXXXXXXX"
    "XXXXXXXX"
    "XXXXX..."
    "XXX....."
    "X.......")
  )

                                        ; add a margin while scrolling
(setq scroll-margin 5)


;; FONT
;;(setq doom-font                (font-spec :family "Source Code Pro" :size 13 :weight 'regular)
;;      doom-variable-pitch-font (font-spec :family "sans"            :size 13
;;))

                                        ; enable syntax highlighting for vimrc files
(add-to-list 'auto-mode-alist '("\\.vim\\(rc\\)?\\'" . vimrc-mode))

;; persistent undo
(setq undo-tree-auto-save-history t)

(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

;; Disable auto fill mode in doom text modes
(remove-hook 'text-mode-hook #'auto-fill-mode)
(add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
(add-hook 'text-mode-hook #'visual-line-mode)
(setq-default fill-column 120)

;; Make evil-mode up/down operate in screen lines instead of logical lines
(define-key evil-motion-state-map "j" 'evil-next-visual-line)
(define-key evil-motion-state-map "k" 'evil-previous-visual-line)
;; Also in visual mode
(define-key evil-visual-state-map "j" 'evil-next-visual-line)
(define-key evil-visual-state-map "k" 'evil-previous-visual-line)

;; Turn on menu bar
(menu-bar-mode 1)

;; tcl mode for xdc files
(add-to-list 'auto-mode-alist '("\\.xdc\\'" . tcl-mode))

;;------------------------------------------------------------------------------
;; themes
;;------------------------------------------------------------------------------

(add-to-list 'load-path "~/.doom.d/themes/")
(add-to-list 'custom-theme-load-path "~/.doom.d/themes/")
(setq doom-light-theme 'leuven-summerfruit)
(setq doom-night-theme 'doom-one)
(setq doom-theme 'leuven-summerfruit)

(defun ap/toggle-theme ()
  "Reload the current color theme."
  (interactive)
  (let ((theme (or (car-safe custom-enabled-themes) doom-theme)))
    (when theme
      (mapc #'disable-theme custom-enabled-themes))
    (load-theme doom-theme 'noconfirm)
    (doom/reload-font)))

#+END_SRC
** General
- Start emacs in full screen by default
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  #+END_SRC
- Tramp
  #+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
  #+END_SRC
- Treat underscore as part of a word to match vim behavior
  #+BEGIN_SRC emacs-lisp
  (modify-syntax-entry ?_ "w")
  #+END_SRC
- Ivy fuzzy search enable
  #+BEGIN_SRC emacs-lisp
  (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
  #+END_SRC
- Projectile
  #+BEGIN_SRC emacs-lisp
  (setq projectile-sort-order 'recently-active)
  #+END_SRC
** Company
#+BEGIN_SRC emacs-lisp

(after! yasnippet
  (define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)
  )
;(setq require-final-newline nil) ;; final newline does not play well with yasnippet

(after! company
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-idle-delay 0.2 company-minimum-prefix-length 3)
  (set-company-backend! '(company-tabnine company-yasnippet  company-files))
                                        ;(set-company-backend! 'org-mode '(company-roam company-files company-dabbrev))
  ;;(set-company-backend! '(tcl-mode) '(company-tabnine company-yasnippet))
  (set-company-backend! '(prog-mode) '(company-tabnine company-yasnippet))
  )
#+END_SRC
** Doom
*** Keymappings
#+BEGIN_SRC emacs-lisp
(after! doom-todo-ivy
  (setq doom/ivy-task-tags '(
                             ("TODO"  . warning)
                             ("FIXME" . error)
                             ("NOTE"  . note)
                             )))
#+END_SRC
*** Dashboard
#+BEGIN_SRC emacs-lisp
(defun peck-dashboard-widget-banner ()
  (let ((point (point)))
    (mapc (lambda (line)
            (insert (propertize (+doom-dashboard--center +doom-dashboard--width line)
                                'face 'doom-dashboard-banner) " ")
            (insert "\n"))
          '(" emacs "))
    (when (and (display-graphic-p)
               (stringp fancy-splash-image)
               (file-readable-p fancy-splash-image))
      (let ((image (create-image (fancy-splash-image-file))))
        (add-text-properties
         point (point) `(display ,image rear-nonsticky (display)))
        (save-excursion
          (goto-char point)
          (insert (make-string
                   (truncate
                    (max 0 (+ 1 (/ (- +doom-dashboard--width
                                      (car (image-size image nil)))
                                   2))))
                   ? ))))
      (insert (make-string (or (cdr +doom-dashboard-banner-padding) 0)
                           ?\n)))))

(setq +doom-dashboard-functions
      '(peck-dashboard-widget-banner
        doom-dashboard-widget-shortmenu
        doom-dashboard-widget-loaded
        doom-dashboard-widget-footer))
#+END_SRC
*** Appearance
#+BEGIN_SRC emacs-lisp

#+END_SRC
*** Alignment functions
#+BEGIN_SRC emacs-lisp
;; (defun align-to-colon (begin end)
;;   "Align region to colon (:) signs"
;;   (interactive "r")
;;   (align-regexp begin end
;;                 (rx (group (zero-or-more (syntax whitespace))) ":") 1 1 ))
;;
;; (defun align-to-comma (begin end)
;;   "Align region to comma  signs"
;;   (interactive "r")
;;   (align-regexp begin end
;;                 (rx "," (group (zero-or-more (syntax whitespace))) ) 1 1 t ))
;;
;; (defun bjm/align-& (start end)
;;   "Align columns by ampersand"
;;   (interactive "r")
;;   (align-regexp start end
;;                 "\\(\\s-*\\)&" 1 1 t))
;;
;; ;; http://pragmaticemacs.com/emacs/aligning-text/
;; (defun bjm/align-comma (start end)
;;   "Align columns by ampersand"
;;   (interactive "r")
;;   (align-regexp start end
;;                 "\\(\\s-*\\),\\(\\s-*\\)" 1 1 t))
;;
;; (defun align-to-equals (begin end)
;;   "Align region to equal signs"
;;   (interactive "r")
;;   (align-regexp begin end
;;                 (rx (group (zero-or-more (syntax whitespace))) "=") 1 1 ))
;;
;; (defun align-to-hash (begin end)
;;   "Align region to hash ( => ) signs"
;;   (interactive "r")
;;   (align-regexp begin end
;;                 (rx (group (zero-or-more (syntax whitespace))) "=>") 1 1 ))
;;
;; ; (defun align-regexp (beg end regexp &optional group spacing repeat)
;; ;; work with this
;; (defun align-to-comma-before (begin end)
;;   "Align region to equal signs"
;;   (interactive "r")
;;   (align-regexp begin end
;;                 (rx (group (zero-or-more (syntax whitespace))) ",") 1 1 t))
;;
;; ;; https://www.reddit.com/r/emacs/comments/6pak1o/configuration_for_alignment_commands/
;; (defun align-whitespace (start end)
;;   "Align columns by whitespace"
;;   (interactive "r")
;;   (align-regexp start end
;;                 "\\(\\s-*\\)\\s-" 1 0 t))

;;;###autoload
(defun align-whitespace (start end)
  "Align columns by whitespace"
  (interactive "r")
  (align-regexp start end
                "\\(\\s-*\\)\\s-" 1 0 t))

;;;###autoload
(defun align-ampersand (start end)
  "Align columns by ampersand"
  (interactive "r")
  (align-regexp start end
                "\\(\\s-*\\)&" 1 1 t))

;;;###autoload
(defun align-quote-space (start end)
  "Align columns by quote and space"
  (interactive "r")
  (align-regexp start end
                "\\(\\s-*\\).*\\s-\"" 1 0 t))

;;;###autoload
(defun align-equals (start end)
  "Align columns by equals sign"
  (interactive "r")
  (align-regexp start end
                "\\(\\s-*\\)=" 1 0 t))

;;;###autoload
(defun align-comma (start end)
  "Align columns by comma"
  (interactive "r")
  (align-regexp start end
                "\\(\\s-*\\)," 1 1 t))

;;;###autoload
(defun align-dot (start end)
  "Align columns by dot"
  (interactive "r")
  (align-regexp start end
                "\\(\\s-*\\)\\\." 1 1 t))

#+END_SRC

*** Evil
#+BEGIN_SRC emacs-lisp
(global-evil-leader-mode)
#+END_SRC
*** FZF
#+BEGIN_SRC emacs-lisp
;; counsel fzf search
(defun searchdirs ()
  (interactive)
  (counsel-fzf "" "~/")
)

(defun projsearchdirs ()
  (interactive)
  (counsel-fzf "" (projectile-project-root))
)
#+END_SRC
*** Evil Bindings
#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map (kbd "C-o") 'searchdirs)
(define-key evil-normal-state-map "\C-p" nil)
(define-key evil-normal-state-map (kbd "C-p") 'projsearchdirs)

;;(define-key evil-visual-state-map (kbd "\\er")   'eval-region)
;(evil-leader/set-key "S" 'magit-stage-file)
;;(evil-leader/set-key "er" 'eval-region)
(evil-leader/set-key "tt" 'doom/ivy-tasks)

(evil-leader/set-key "f" 'searchdirs)
;; leader x for helm execute
(evil-leader/set-key "x" 'counsel-M-x)

(evil-leader/set-key "pp" '+ivy/project-search)

;; (defun fzf-recentf ()
;;   (interactive)
;;   (fzf-with-entries recentf-list
;;     (lambda (f) (when (file-exists-p f) (find-file f))))
;; )

;; (evil-leader/set-key "rr" 'fzf-recentf)
 (evil-leader/set-key "rr" 'projectile-recentf)

;; delete trailing whitespace
(evil-leader/set-key "rtw" 'delete-trailing-whitespace)

;; ;;  helm-projectile
;; (evil-leader/set-key "c" 'helm-projectile-ag)
;;
;; ;;  helm-locate
;; (setq helm-locate-fuzzy-match nil
;;       helm-locate-command "mdfind -interpret -name %s %s")
;; (evil-leader/set-key "f" 'helm-locate)

(evil-leader/set-key "g" 'magit-status)

;; map helm mini to leader
;;(evil-leader/set-key "b" 'helm-mini)

;; map dired to leader
(evil-leader/set-key "E" 'dired)

(evil-leader/set-key "pp" 'org-publish-current-project)

;; (evil-leader/set-key "tag" 'projectile-regenerate-tags)

(after! evil-maps
    ;; Ctrl-P
    ;(bind-key* "C-p" 'projectile-find-file)

    ;; let enter open org mode links
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") 'org-open-at-point)
    (define-key evil-motion-state-map (kbd "TAB") nil)
    (setq org-return-follows-links t)

    ;; Backspace to switch to last buffer
    (defun er-switch-to-previous-buffer ()
        "Switch to previously open buffer. Repeated invocations toggle between the two most recently open buffers."
        (interactive)
        (switch-to-buffer (other-buffer (current-buffer) 1)))
    (define-key evil-normal-state-map (kbd "DEL") 'er-switch-to-previous-buffer)
    (add-hook 'verilog-mode-hook (lambda() (local-unset-key [backspace])))

    (define-key evil-normal-state-map (kbd "C-a")   'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-S-a") 'evil-numbers/dec-at-pt)
    (define-key evil-visual-state-map (kbd "C-a")   'evil-numbers/inc-at-pt-incremental)
    (define-key evil-visual-state-map (kbd "C-S-a") 'evil-numbers/dec-at-pt-incremental)

    (define-key evil-normal-state-map (kbd "C-t") 'evil-jump-backward)
)
#+END_SRC
** VHDL Mode

#+BEGIN_SRC emacs-lisp
;; vhdl mode will wrap comments after some # of characters
(setq vhdl-end-comment-column 200)
(setq vhdl-prompt-for-comments nil)
;;(add-hook 'vhdl-mode-hook
;;(setq auto-fill-mode nil)
;;)
#+END_SRC

** Org Mode
*** Org mode options
#+BEGIN_SRC emacs-lisp


(setq org-directory "~/Dropbox/notes")
(setq org-default-notes-file (concat org-directory "/notes.org"))

; https://github.com/sk8ingdom/.emacs.d/blob/master/org-mode-config/org-capture-templates.el
(after! org
  (add-to-list 'org-capture-templates
               '("s" "Shopping" item (file+headline +org-capture-todo-file "Shopping")
               "- [ ] %?" :prepend t))
  (setq org-startup-folded 'f)
  (setq org-startup-with-inline-images t)
  (org-display-inline-images t t)
  )

; Allow M-Ret to split list items
(setq org-M-RET-may-split-line t)

#+END_SRC
*** Org mode download images
#+BEGIN_SRC emacs-lisp
;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)

(use-package! org-download
  :config
  (setq-default org-download-method            'directory
                org-download-screenshot-method "xfce4-screenshooter -r -s %s"
                org-download-image-dir         "./images/downloads"
                org-download-heading-lvl       0
                ;;org-download-link-format       "[[file:%s]]"
                ;;org-download-image-attr-list   ("#+attr_org: :width 800px")
                org-download-annotate-function (lambda (link) "")
                org-download-image-org-width   800
                )
)

(after! org-attach-screenshot
  (setq org-attach-screenshot-command-line "xfce4-screenshooter -r -s %f")
  )

#+END_SRC 
*** Org publishing
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-list-allow-alphabetical t)
  (setq org-publish-project-alist
        '(
          ;; ... add all the components here (see below)...
          ("org-notes"
           :base-directory "~/Dropbox/notes/"
           :base-extension "org"
           :publishing-directory "~/notes_html/"
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4  ; Just the default for this project.
           :auto-preamble t
           )

          ("org-static"
           :base-directory "~/Dropbox/notes/"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
           :publishing-directory "~/notes_html/"
           :recursive t
           :publishing-function org-publish-attachment
           )

          ("org" :components ("org-notes" "org-static"))

          )
        )
  )
#+END_SRC
*** Org roam
#+BEGIN_SRC emacs-lisp


(use-package! org-roam

  :commands
  (org-roam-insert org-roam-find-file org-roam-switch-to-buffer org-roam)

  :hook
  (after-init . org-roam-mode)

  :init

  (setq org-roam-directory "~/Dropbox/notes/")
  (map! :leader
        :prefix "n"
        :desc "Org-Roam-Insert" "i" #'org-roam-insert
        :desc "Org-Roam-Find"   "/" #'org-roam-find-file
        :desc "Org-Roam-Buffer" "r" #'org-roam
        :desc "Org-Roam-Show-Graph" "g" #'org-roam-show-graph
        )

  (set-company-backend! 'org-mode
    '(company-org-roam :with company-dabbrev :with company-yasnippet))

                                        ;(setq org-roam-link-title-format "Org:%s")
  (setq org-roam-db-location "~/Dropbox/notes/org-roam.db")
  (setq org-roam-backlinks-mode-hook
        '(
          (flyspell-mode)
          (define-key evil-motion-state-map (kbd "RET") 'org-roam-open-at-point)
          )
        )

  (setq org-roam-completion-system 'ivy)

  :config

  (require 'org-roam-protocol)

  (setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "${title}"
           :head "#+TITLE: ${title}\n#+SETUPFILE: \"setup.org\"\n"
           :unnarrowed t))
        )
  )

#+END_SRC
