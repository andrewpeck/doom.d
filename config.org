#+SETUPFILE: theme-readtheorg.setup
* Emacs Configuration
#+BEGIN_SRC emacs-lisp

(add-to-list 'default-frame-alist '(fullscreen . maximized))

(setq tramp-default-method "ssh")

(remove-hook 'text-mode-hook #'auto-fill-mode)

;; Drag-and-drop to `dired`
(add-hook 'dired-mode-hook 'org-download-enable)

(setq org-M-RET-may-split-line t)

(use-package! org-download
  :config
  (setq-default org-download-method            'directory
                org-download-screenshot-method "gnome-screenshot -a -f %s"
                org-download-image-dir         "./images/downloads"
                org-download-heading-lvl       0
                ;;org-download-link-format       "[[file:%s]]"
                ;;org-download-image-attr-list   ("#+attr_org: :width 800px")
                org-download-annotate-function (lambda (link) "")
                org-download-image-org-width   800
                )
)

(after! org-attach-screenshot
  (setq org-attach-screenshot-command-line "gnome-screenshot -a -c -f %f")
  )
(after! org
  (setq org-list-allow-alphabetical t)
  (setq org-publish-project-alist
        '(
          ;; ... add all the components here (see below)...
          ("org-notes"
           :base-directory "~/Dropbox/notes/"
           :base-extension "org"
           :publishing-directory "~/notes_html/"
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4  ; Just the default for this project.
           :auto-preamble t
           )

          ("org-static"
           :base-directory "~/Dropbox/notes/"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
           :publishing-directory "~/notes_html/"
           :recursive t
           :publishing-function org-publish-attachment
           )

          ("org" :components ("org-notes" "org-static"))

          )
        )
  )


(use-package! org-roam

  :commands
  (org-roam-insert org-roam-find-file org-roam-switch-to-buffer org-roam)

  :hook
  (after-init . org-roam-mode)

  :init

  (setq org-roam-directory "~/Dropbox/notes/")
  (map! :leader
        :prefix "n"
        :desc "Org-Roam-Insert" "i" #'org-roam-insert
        :desc "Org-Roam-Find"   "/" #'org-roam-find-file
        :desc "Org-Roam-Buffer" "r" #'org-roam
        :desc "Org-Roam-Show-Graph" "g" #'org-roam-show-graph
        )

  (set-company-backend! 'org-mode
    '(company-org-roam :with company-dabbrev :with company-yasnippet))

                                        ;(setq org-roam-link-title-format "Org:%s")
  (setq org-roam-db-location "~/Dropbox/notes/org-roam.db")
  (setq org-roam-backlinks-mode-hook
        '(
          (flyspell-mode)
          (define-key evil-motion-state-map (kbd "RET") 'org-roam-open-at-point)
          )
        )

  (setq org-roam-completion-system 'ivy)

  :config

  (require 'org-roam-protocol)

  (setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam--capture-get-point)
           "%?"
           :file-name "${title}"
           :head "#+TITLE: ${title}\n#+SETUPFILE: \"setup.org\"\n"
           :unnarrowed t))
        )
  )


(after! org
  (setq org-startup-folded 'f)
  (setq org-startup-with-inline-images t)
  (org-display-inline-images t t)
  )

;; vhdl mode will wrap comments after some # of characters
(setq vhdl-end-comment-column 200)
(setq vhdl-prompt-for-comments nil)
;;(add-hook 'vhdl-mode-hook
;;(setq auto-fill-mode nil)
;;)
(require 'fzf)
;; ivy fuzzy search enable
(setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))

(map! :leader "t t" 'doom/ivy-tasks)

;; tcl mode for xdc files
;;(add-to-list 'auto-mode-alist '("\\.xdc\\'" . tcl-mode))
;;(use-package! summerfruit-theme
;;  :load-path "~/.doom.d/lisp"
;;)
                                        ;(setq doom-theme 'summerfruit)

(defun peck-dashboard-widget-banner ()
  (let ((point (point)))
    (mapc (lambda (line)
            (insert (propertize (+doom-dashboard--center +doom-dashboard--width line)
                                'face 'doom-dashboard-banner) " ")
            (insert "\n"))
          '(" E M A C S "))
    (when (and (display-graphic-p)
               (stringp fancy-splash-image)
               (file-readable-p fancy-splash-image))
      (let ((image (create-image (fancy-splash-image-file))))
        (add-text-properties
         point (point) `(display ,image rear-nonsticky (display)))
        (save-excursion
          (goto-char point)
          (insert (make-string
                   (truncate
                    (max 0 (+ 1 (/ (- +doom-dashboard--width
                                      (car (image-size image nil)))
                                   2))))
                   ? ))))
      (insert (make-string (or (cdr +doom-dashboard-banner-padding) 0)
                           ?\n)))))

(setq +doom-dashboard-functions
      '(peck-dashboard-widget-banner
        doom-dashboard-widget-shortmenu
        doom-dashboard-widget-loaded
        doom-dashboard-widget-footer))



(setq projectile-sort-order 'recently-active)

;;(setq doom-theme 'doom-summerfruit-theme)

(menu-bar-mode 1)
;;(setq doom-theme 'doom-tomorrow-day)
                                        ;(setq doom-theme 'base16-summerfruit-light-theme)
(add-to-list 'load-path "~/.doom.d/themes/")
(add-to-list 'custom-theme-load-path "~/.doom.d/themes/")
(setq doom-theme 'leuven-summerfruit)

(after! solarized-emacs
  (custom-theme-set-faces
   'solarized-light
   '(font-lock-comment-face ((t (:background "#FFFFFF"))))
   '(default ((t (:background "#FFFFFF"))))
   )
  )

(setq hl-line-mode nil)
(setq global-hl-line-mode nil)
(setq doom-buffer-hl-line-mode nil)

(after! company
  (setq company-idle-delay 0.2 company-minimum-prefix-length 3)
  (set-company-backend! '(company-yasnippet  company-files company-dabbrev company-keywords company-capf company-tabnine ))
  (set-company-backend! 'org-mode '(company-roam company-files company-dabbrev))
  ;;(set-company-backend! '(tcl-mode) '(company-tabnine company-yasnippet))
  ;;(set-company-backend! '(vhdl-mode) '(company-tabnine company-yasnippet))
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun align-to-colon (begin end)
  "Align region to colon (:) signs"
  (interactive "r")
  (align-regexp begin end
                (rx (group (zero-or-more (syntax whitespace))) ":") 1 1 ))

(defun align-to-comma (begin end)
  "Align region to comma  signs"
  (interactive "r")
  (align-regexp begin end
                (rx "," (group (zero-or-more (syntax whitespace))) ) 1 1 ))


(defun align-to-equals (begin end)
  "Align region to equal signs"
  (interactive "r")
  (align-regexp begin end
                (rx (group (zero-or-more (syntax whitespace))) "=") 1 1 ))

(defun align-to-hash (begin end)
  "Align region to hash ( => ) signs"
  (interactive "r")
  (align-regexp begin end
                (rx (group (zero-or-more (syntax whitespace))) "=>") 1 1 ))

;; work with this
(defun align-to-comma-before (begin end)
  "Align region to equal signs"
  (interactive "r")
  (align-regexp begin end
                (rx (group (zero-or-more (syntax whitespace))) ",") 1 1 ))
#+END_SRC

treat underscore as part of a word to match vim behavior
#+BEGIN_SRC emacs-lisp
(modify-syntax-entry ?_ "w")
#+END_SRC

evil leader keybindings
#+BEGIN_SRC emacs-lisp
(global-evil-leader-mode)

(setenv "FZF_DEFAULT_COMMAND"
(string-trim (shell-command-to-string ". ~/.bashrc; echo -n $FZF_DEFAULT_COMMAND")))

;; counsel fzf search
(defun searchdirs ()
  (interactive)
  (counsel-fzf "" "~/")
)
(define-key evil-normal-state-map (kbd "C-o") 'searchdirs)

(evil-leader/set-key "f" 'searchdirs)
;; leader x for helm execute
(evil-leader/set-key "x" 'counsel-M-x)

(evil-leader/set-key "pp" '+ivy/project-search)

;; (defun fzf-recentf ()
;;   (interactive)
;;   (fzf-with-entries recentf-list
;;     (lambda (f) (when (file-exists-p f) (find-file f))))
;; )

;; (evil-leader/set-key "rr" 'fzf-recentf)
 (evil-leader/set-key "rr" 'projectile-recentf)

;; delete trailing whitespace
(evil-leader/set-key "rtw" 'delete-trailing-whitespace)

;; ;;  helm-projectile
;; (evil-leader/set-key "c" 'helm-projectile-ag)
;;
;; ;;  helm-locate
;; (setq helm-locate-fuzzy-match nil
;;       helm-locate-command "mdfind -interpret -name %s %s")
;; (evil-leader/set-key "f" 'helm-locate)

(evil-leader/set-key "g" 'magit-status)

;; map helm mini to leader
;;(evil-leader/set-key "b" 'helm-mini)

;; map dired to leader
(evil-leader/set-key "e" 'dired)

(evil-leader/set-key "pp" 'org-publish-current-project)

;; (evil-leader/set-key "tag" 'projectile-regenerate-tags)
#+END_SRC

#+BEGIN_SRC emacs-lisp
; enable syntax highlighting for vimrc files
    (add-to-list 'auto-mode-alist '("\\.vim\\(rc\\)?\\'" . vimrc-mode))
#+END_SRC

evil maps
#+BEGIN_SRC emacs-lisp
(after! evil-maps
    ;; Ctrl-P
    (define-key evil-normal-state-map "\C-p" nil)
    (bind-key* "C-p" 'projectile-find-file)

    ;; let enter open org mode links
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") 'org-open-at-point)
    (define-key evil-motion-state-map (kbd "TAB") nil)
    (setq org-return-follows-links t)

    ;; Backspace to switch to last buffer
    (defun er-switch-to-previous-buffer ()
        "Switch to previously open buffer. Repeated invocations toggle between the two most recently open buffers."
        (interactive)
        (switch-to-buffer (other-buffer (current-buffer) 1)))
    (define-key evil-normal-state-map (kbd "DEL") 'er-switch-to-previous-buffer)


    (define-key evil-normal-state-map (kbd "C-a") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-x") 'evil-numbers/dec-at-pt)
    (define-key evil-visual-state-map (kbd "C-a") 'evil-numbers/inc-at-pt-incremental)
    (define-key evil-visual-state-map (kbd "C-x") 'evil-numbers/dec-at-pt-incremental)
)
#+END_SRC


#+BEGIN_SRC emacs-lisp
;; (use-package poet-theme :ensure t)
#+END_SRC



** Misc Settings
#+BEGIN_SRC emacs-lisp
;(require 'org)
;;   (setq org-agenda-inhibit-startup nil)
;;   (setq org-src-fontify-natively t)
;;   (setq org-src-tab-acts-natively t)
;;   (setq org-edit-src-content-indentation 0)
;;   (setq org-fontify-quote-and-verse-blocks t)
;;   (setq org-src-window-setup 'other-window)
;;   (setq org-image-actual-width nil)
;;
;;
;;   ;; hide markup in org-mode
;;   (setq org-hide-emphasis-markers t)
;;
;;   ;; display inline images at startup
;;
;;   ;; turn on flyspell mode by default
;;   (add-hook 'text-mode-hook 'flyspell-mode)
;;   (add-hook 'prog-mode-hook 'flyspell-prog-mode)

#+END_SRC

** Fonts

#+BEGIN_SRC emacs-lisp

;; (add-hook 'org-mode-hook (lambda () (
;;                                      variable-pitch-mode t
;;                 (custom-theme-set-faces
;;                 'user
;;                     '(variable-pitch ((t (:family "Liberation Serif" :height 1.1 :weight light))))
;;                     '(fixed-pitch    ((t (:family "Inconsolata"      :height 0.9 :slant normal :weight normal :width normal)))))
;;                                                          )))
;; (add-hook 'latex-mode-hook (lambda () (variable-pitch-mode t)))


;; (font-lock-add-keywords 'org-mode
;;                         '(("^ *\\([-]\\) "
;; 						                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

#+END_SRC
#
# *** Other Org Mode
# #+BEGIN_SRC emacs-lisp
#
# ; bullets for org mode
# ;(use-package org-bullets
# ;               :config
# ;                 (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
# ;(setq org-bullets-bullet-list
# ;	'("◉" "○"))
# ;(org-bullets 1)
#
#
# ;; revert cuffer with C-c r
# (global-set-key (kbd "C-c r") (lambda ()
#                                 (interactive)
#                                 (revert-buffer t t t)
#                                 (message "buffer is reverted")))
#
# ;; This buffer is for text that is not saved, and for Lisp evaluation.
# ;; To create a file, visit it with C-x C-f and enter text in its buffer.
#
# ;(use-package htmlize :ensure t)
# (require 'ox-publish)
# (setq org-publish-project-alist '(
#
#        ;; ... add all the components here (see below)...
#         ("org-notes"
#          :base-directory "~/notes/"
#          :base-extension "org"
#          :publishing-directory "~/notes_html/"
#          :recursive t
#          :publishing-function org-html-publish-to-html
#          :headline-levels 4  ; Just the default for this project.
#          :auto-preamble t
#          )
#
#         ("org-static"
#          :base-directory "~/notes/"
#          :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
#          :publishing-directory "~/notes_html/"
#          :recursive t
#          :publishing-function org-publish-attachment
#          )
#
#         ("org" :components ("org-notes" "org-static"))
#
#         ))
#
#
#
# #+END_SRC
#
# **** PDF Export
# #+BEGIN_SRC emacs-lisp
# (defun org-export-as-pdf-and-open ()
#   (interactive)
#   (save-buffer)
#   (org-open-file (org-latex-export-to-pdf)))
#
# (add-hook
#  'org-mode-hook
#  (lambda()
#    (define-key org-mode-map
#        (kbd "<f5>") 'org-export-as-pdf-and-open)))
#
#
# #+END_SRC
#
# ** ???
# #+BEGIN_SRC emacs-lisp
# (add-to-list 'load-path "~/.emacs.d/lisp/")
# (require 'epa-file)
# (epa-file-enable)
# (ac-config-default)
# (global-auto-complete-mode t)
# ;; helm
#
# ; from: http://cachestocaches.com/2016/12/vim-within-emacs-anecdotal-guide/
# ; (define-key helm-map (kbd "C-j") 'helm-next-line)
# ; (define-key helm-map (kbd "C-k") 'helm-previous-line)
# ; (define-key helm-map (kbd "C-h") 'helm-next-source)
# ; (define-key helm-map (kbd "C-S-h") 'describe-key)
# ; (define-key helm-map (kbd "C-l") (kbd "RET"))
# ; (define-key helm-map [escape] 'helm-keyboard-quit)
# ; (dolist
# ;     (keymap (list helm-find-files-map helm-read-file-map))
# ;     (define-key keymap (kbd "C-l") 'helm-execute-persistent-action)
# ;     (define-key keymap (kbd "C-h") 'helm-find-files-up-one-level)
# ;     (define-key keymap (kbd "C-S-h") 'describe-key)
# ; )
# #+END_SRC

** Startup
# #+BEGIN_SRC emacs-lisp
# (setq org-startup-indented t)
# #+END_SRC
#
# ;    (use-package adaptive-wrap
# ;
# ;      :ensure t
# ;
# ;      :config
# ;
# ;      (setq-default adaptive-wrap-extra-indent 2)
# ;      (add-hook 'visual-line-mode-hook #'adaptive-wrap-prefix-mode)
# ;      (global-visual-line-mode +1)
# ;
# ;
# ;    ; (when (fboundp 'adaptive-wrap-prefix-mode)
# ;    ;  (defun my-activate-adaptive-wrap-prefix-mode ()
# ;    ;        "Toggle `visual-line-mode' and `adaptive-wrap-prefix-mode' simultaneously."
# ;    ;    (adaptive-wrap-prefix-mode (if visual-line-mode 1 -1))
# ;    ;    )
# ;    ; )
# ;    )
# #+END_SRC
#
** Evil Mode
# #+BEGIN_SRC emacs-lisp
# ;; Align with spaces only
#
# (defadvice align-regexp (around align-regexp-with-spaces)
#   "Never use tabs for alignment."
#   (let ((indent-tabs-mode nil))
#     ad-do-it))
# (ad-activate 'align-regexp)
#
# #+END_SRC
#
# **** Keybindings
#
# (local-set-key [tab] 'tab-to-tab-stop)
#
# (with-eval-after-load 'evil-maps
#   (bind-key* "C-M-t" 'elscreen-create)
#   (bind-key* "M-t"    'elscreen-create)
#   (bind-key* "C-<tab>" 'elscreen-next)
#   (bind-key* "C-S-<tab>" 'elscreen-previous)
# )
#
# ;;
#
# (setq org-link-frame-setup '((file . find-file)))
#
#
# #+END_SRC
#
# **** Evil shift left/right
# #+BEGIN_SRC emacs-lisp
# ;; Overload shifts so that they don't lose the selection
# ;; c.f. https://superuser.com/questions/684540/evil-mode-evil-shift-left-loses-selection
#
# (define-key evil-visual-state-map (kbd ">") 'djoyner/evil-shift-right-visual)
# (define-key evil-visual-state-map (kbd "<") 'djoyner/evil-shift-left-visual)
# (define-key evil-visual-state-map [tab] 'djoyner/evil-shift-right-visual)
# (define-key evil-visual-state-map [S-tab] 'djoyner/evil-shift-left-visual)
#
# (defun djoyner/evil-shift-left-visual ()
#   (interactive)
#   (call-interactively 'evil-shift-left)
#   (evil-normal-state)
#   (evil-visual-restore))
#
# (defun djoyner/evil-shift-right-visual ()
#   (interactive)
#   (call-interactively 'evil-shift-right)
#   (evil-normal-state)
#   (evil-visual-restore))
#
# #+END_SRC
# ** Misc
# *** Line numbering
# #+BEGIN_SRC emacs-lisp
# (global-linum-mode 1)
# #+END_SRC
# *** Ido
# #+BEGIN_SRC emacs-lisp
# ; ido
# (setq ido-enable-flex-matching t)
# (setq ido-everywhere t)
# (ido-mode 1)
#
# ;; use ido to open files
# ;(define-key evil-ex-map "e " 'ido-find-file)
#
# #+END_SRC
#
# *** ???
# #+BEGIN_SRC emacs-lisp
# (when (memq window-system '(mac ns))
#   (exec-path-from-shell-initialize))
# #+END_SRC
#
# *** Save History
# #+BEGIN_SRC emacs-lisp
# (setq savehist-additional-variables    ;; also save...
#   '(search-ring regexp-search-ring)    ;; ... my search entries
#   savehist-file "~/.emacs.d/savehist") ;; keep my home clean
# (savehist-mode t)                      ;; do customization before activate
# #+END_SRC
#
# *** Remember Undo History
# #+BEGIN_SRC emacs-lisp
# (setq undo-tree-auto-save-history t)
# #+END_SRC
#
# *** Markdown MMM
# #+BEGIN_SRC emacs-lisp
# (use-package mmm-mode :ensure t)
# (require 'mmm-mode)
# (setq mmm-global-mode 'maybe)
#
# (defun my-mmm-markdown-auto-class (lang &optional submode)
#   "Define a mmm-mode class for LANG in `markdown-mode' using SUBMODE.
# If SUBMODE is not provided, use `LANG-mode' by default."
#   (let ((class (intern (concat "markdown-" lang)))
#         (submode (or submode (intern (concat lang "-mode"))))
#         (front (concat "^```" lang "[\n\r]+"))
#         (back "^```"))
#     (mmm-add-classes (list (list class :submode submode :front front :back back)))
#     (mmm-add-mode-ext-class 'markdown-mode nil class)))
#
# ;; Mode names that derive directly from the language name
# (mapc 'my-mmm-markdown-auto-class
#       '("verilog" "vhdl" "awk" "bibtex" "c" "cpp" "css" "html" "latex"
#         "lisp" "makefile" "markdown" "python" "r" "ruby" "sql" "stata" "xml"))
#
# (setq mmm-parse-when-idle 't)
#
# #+END_SRC
# *** Set encoding
# #+BEGIN_SRC emacs-lisp
# (prefer-coding-system 'utf-8)
# (set-keyboard-coding-system 'utf-8)
# (setq coding-system-for-read 'utf-8)
# (setq coding-system-for-write 'utf-8)
# (setq locale-coding-system 'utf-8)
# (set-selection-coding-system 'utf-8)
# (set-terminal-coding-system 'utf-8)
# #+END_SRC
#
# *** Clipboard
# #+BEGIN_SRC emacs-lisp
# (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
# (setq x-select-enable-clipboard t)
# #+END_SRC
#
# ***  ???
# #+BEGIN_SRC emacs-lisp
#
# (modify-frame-parameters nil '((wait-for-wm . nil)))
#
# #+END_SRC
#
# *** LaTex
# #+BEGIN_SRC emacs-lisp
# ;; ;; latex stuff
# ;; (if (eq system-type 'windows-nt)
# ;;     (progn
# ;;
# ;;     )
# ;;     (progn
# ;;
# ;; ;; window decoration
# ;; (if window-system (require 'font-latex))
# ;; (setq font-lock-maximum-decoration t)
# ;;
# ;;         (load "auctex.el" nil t t)
# ;;         (load "preview-latex.el" nil t t)
# ;;         (add-hook 'message-mode-hook 'turn-on-orgtbl)
# ;;         (setq TeX-PDF-mode t)                ; PDF mode (rather than DVI-mode)
# ;;         (setq TeX-view-program-list '(("Atril" "atril --page-index=%(outpage) %o")))
# ;;         (setq TeX-view-program-selection '((output-pdf "atril")))
# ;;      )
# ;; )
#
# #+END_SRC
#
# *** Browser
# #+BEGIN_SRC emacs-lisp
# ;; default browser
# ;; (setq browse-url-browser-function 'browse-url-generic
# ;;       browse-url-generic-program "google-chrome")
# #+END_SRC
#
# *** Toolbar Mode
# #+BEGIN_SRC emacs-lisp
# ;; turn off toolbar
# (tool-bar-mode -1)
#
# #+END_SRC
#
# *** Tabbing
# #+BEGIN_SRC emacs-lisp
# ;; default tab width
# (setq default-tab-width 2)
# (setq-default indent-tabs-mode nil)
#
# #+END_SRC
#
# *** Verilog
# #+BEGIN_SRC emacs-lisp
# ;; turn on verilog mode
# ; (add-to-list 'auto-mode-alist '("\\.[ds]?vh?\\'" . verilog-mode))
# #+END_SRC
#
# *** VHDL
# #+BEGIN_SRC emacs-lisp
# (setq vhdl-basic-offset 2)
# #+END_SRC
#
# ** Projectile
# #+BEGIN_SRC emacs-lisp
#
# (projectile-global-mode)
#
#
#
# #+END_SRC
#



# *** To do:
# **** TODO  linter
# **** TODO  line-wrapping
# **** TODO  magic increment
# **** TODO  splitbelow, splitright
# **** TODO  insert gates on .h .hpp
# **** TODO  insert vhdl boilerplate
# **** TODO  comment block inserter
# **** TODO  latex compilaton
# **** TODO  folding
# **** TODO  undotree
# **** TODO  easily move lines around
# **** TODO  tabularize
# *** Package Setup
#
#
# (use-package evil-surround
#     :ensure t
#     :config
#     (global-evil-surround-mode 1)
# )
#
# *** Configuration
# **** Misc
# #+BEGIN_SRC emacs-lisp
# (setq-default
#  evil-search-module 'evil-search
#  evil-shift-width 2
#  )
# #+END_SRC
#
