;; -*- lexical-binding: t; no-byte-compile: t;-*-

;; start:sort -- keep the stuff below sorted alphabetically
(package! affe)
(package! all-the-icons)
(package! all-the-icons-dired)
(package! all-the-icons-ibuffer)
(package! all-the-icons-ivy)
(package! backup-each-save)
(package! crontab-mode)
(package! doom-todo-ivy :recipe (:host github :repo "jsmestad/doom-todo-ivy"))
(package! emojify)
(package! evil-leader)
(package! evil-matchit)
(package! ewp :recipe (:host github :repo "larsmagne/ewp"))
(package! flycheck-clang-tidy)
(package! flymake-json)
(package! fzf :recipe (:host github :repo "bling/fzf.el"))
(package! graphviz-dot-mode)
(package! irony)
(package! logview)
(package! lorem-ipsum)
(package! magit-todos)
(package! mermaid-mode :recipe (:host github :repo "abrochard/mermaid-mode"))
(package! mixed-pitch)
(package! ob-mermaid :recipe (:host github :repo "arnm/ob-mermaid"))
(package! org-download :recipe (:host github :repo "abo-abo/org-download"))
(package! org-mode :pin "971eb6885ec996c923e955730df3bafbdc244e54") ; https://github.com/doomemacs/doomemacs/issues/6478
(package! org-protocol-capture-html :recipe (:host github :repo "alphapapa/org-protocol-capture-html"))
(package! org-web-tools)
(package! ox-clip :recipe (:host github :repo "jkitchin/ox-clip"))
(package! ox-gfm)
(package! pdf-tools)
(package! scad-mode)
(package! screenshot :recipe (:host github :repo "tecosaur/screenshot"))
(package! straight :pin "3eca39d"); https://github.com/doomemacs/doomemacs/issues/6960
(package! systemd :pin "b6ae63a236605b1c5e1069f7d3afe06ae32a7bae" :recipe (:host github :repo "holomorph/systemd-mode"))
(package! toc-org)
(package! vimrc-mode)
(package! visual-fill-column)
(package! web-mode)
(package! xr)                           ; xr is rx in reverse
(package! yaml-mode)
;; end:sort

;; start:sort -- keep the stuff below sorted alphabetically
;;(package! ample-regexps)
;;(package! auctex)
;;(package! base16-theme)
;;(package! bespoke-modeline :recipe (:host github :repo "mclear-tools/bespoke-modeline"))
;;(package! bespoke-themes :recipe (:host github :repo "mclear-tools/bespoke-themes"))
;;(package! browse-at-remote)
;;(package! clang-format)
;;(package! clang-format+)
;;(package! company)
;;(package! company-box)
;;(package! company-jedi)
;;(package! company-tabnine)
;;(package! counsel-etags)
;;(package! dumb-jump)
;;(package! eaf :recipe (:host github :repo "manateelazycat/emacs-application-framework"))
;;(package! elfeed)
;;(package! elpy)
;;(package! emacs-tree-sitter :recipe  (:host github :repo   "emacs-tree-sitter/elisp-tree-sitter"))
;;(package! esup)
;;(package! etags-table)
;;(package! evil-anzu)
;;(package! fira-code-mode)
;;(package! flycheck-projectile :pin "ce6e9e8" :recipe (:host github :repo "nbfalcon/flycheck-projectile"))
;;(package! fzf :recipe (:host github :repo "seenaburns/fzf.el"))
;;(package! good-scroll :recipe (:host github :repo "io12/good-scroll.el"))
;;(package! hl-line :disable t)
;;(package! htmlize :recipe (:host github :repo "hniksic/emacs-htmlize"))
;;(package! infix.el :recipe (:host github :repo "rspeele/infix.el"))
;;(package! leuven-theme)
;;(package! lsp-mode :recipe (:host github :repo "emacs-lsp/lsp-mode"))
;;(package! lsp-pyright)
;;(package! mmm-mode)
;;(package! nano-modeline)
;;(package! nano-theme)
;;(package! olivetti)
;;(package! org-attach-screenshot)
;;(package! org-bullets)
;;(package! org-gcal :recipe (:host github :repo "kidd/org-gcal.el"))
;;(package! org-roam :recipe (:host github :repo "org-roam/org-roam"))
;;(package! org-roam-server)
;;(package! org-sync)
;;(package! org-table-comment)
;;(package! pcre2el)
;;(package! popup)
;;(package! prism)
;;(package! rainbow-mode) ;; included in rgb package
;;(package! svg-tag-mode :recipe (:host github :repo "rougier/svg-tag-mode"))
;;(package! theme-changer :recipe (:host github :repo "hadronzoo/theme-changer"))
;;(package! tree-sitter)
;;(package! tree-sitter-langs)
;;(package! undo-hl :recipe (:host github :repo "casouri/undo-hl"))
;;(package! vlf)                          ; view large files
;;(package! vterm)
;; end:sort

;; Local Variables:
;; eval: (make-variable-buffer-local 'write-contents-functions)
;; eval: (add-hook 'write-contents-functions 'sort-elisp-block nil t)
;; End:
